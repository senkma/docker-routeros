name: RouterOS Docker CI/CD Pipeline

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master

env:
    ROUTEROS_VERSION: "7.19.4"

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build RouterOS Docker image
              run: |
                  docker build --build-arg ROUTEROS_VERSION=${{ env.ROUTEROS_VERSION }} -t routeros:test .

            - name: Test Docker image
              run: |
                  # Basic test to ensure image builds successfully
                  docker images | grep routeros

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-test
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
                  SERVER_HOST: ${{ secrets.SERVER_HOST }}
                  SERVER_USER: ${{ secrets.SERVER_USER }}
                  ROUTEROS_VERSION: ${{ env.ROUTEROS_VERSION }}
              run: |
                  # Setup SSH
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
                  
                  # Create deployment directory on server
                  ssh $SERVER_USER@$SERVER_HOST "mkdir -p /opt/docker-routeros"
                  
                  # Sync project files to server
                  rsync -avz --exclude='.git' --exclude='node_modules' --exclude='.github' \
                      ./ $SERVER_USER@$SERVER_HOST:/opt/docker-routeros/
                  
                  # Deploy RouterOS container
                  ssh $SERVER_USER@$SERVER_HOST "cd /opt/docker-routeros && \
                      export ROUTEROS_VERSION=$ROUTEROS_VERSION && \
                      # Check if KVM is available
                      if [ -e /dev/kvm ]; then \
                          echo 'Using KVM-enabled configuration' && \
                          COMPOSE_FILE='docker-compose.prod.yml'; \
                      else \
                          echo 'KVM not available, using no-KVM configuration' && \
                          COMPOSE_FILE='docker-compose.no-kvm.yml'; \
                      fi && \
                      docker compose -f \$COMPOSE_FILE down || true && \
                      docker compose -f \$COMPOSE_FILE build --build-arg ROUTEROS_VERSION=$ROUTEROS_VERSION && \
                      docker compose -f \$COMPOSE_FILE up -d"
                  
                  # Wait for container to start and verify
                  ssh $SERVER_USER@$SERVER_HOST "sleep 30 && docker ps | grep routeros || exit 1"
                  
                  echo "âœ… RouterOS deployed successfully!"
                  echo "ðŸ”— Access points:"
                  echo "   SSH: ssh admin@$SERVER_HOST -p 2222"
                  echo "   API: $SERVER_HOST:8728"
                  echo "   Web: http://$SERVER_HOST:8080"
